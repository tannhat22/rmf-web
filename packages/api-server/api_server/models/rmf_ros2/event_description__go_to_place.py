# generated by datamodel-codegen:
#   filename:  event_description__go_to_place.json

from __future__ import annotations

from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field, RootModel

from . import place


class Constraint(BaseModel):
    category: str = Field(
        ..., description="The type of constraint, e.g. prefer_same_map"
    )
    description: Optional[Any] = Field(
        default=None, description="A complete description of the constraint"
    )


class GoToPlaceEventDescription1(BaseModel):
    place: place.PlaceDescription
    followed_by: Optional[List[place.PlaceDescription]] = Field(
        default=None,
        description="A list of places that the robot might go after it reaches this one. It will not actually go to these places unless other activities bring it there, but the traffic system will be told to expect the robot to proceed through these places.",
    )


class GoToPlaceEventDescription2(BaseModel):
    one_of: List[place.PlaceDescription] = Field(
        ...,
        description="A list of places to choose from. Will try to go to the nearest one.",
        min_length=1,
    )
    constraints: Optional[List[Constraint]] = Field(
        default=None, description="list of constraints to use"
    )


class GoToPlaceEventDescription(
    RootModel[
        Union[
            place.PlaceDescription,
            GoToPlaceEventDescription1,
            GoToPlaceEventDescription2,
        ]
    ]
):
    root: Union[
        place.PlaceDescription, GoToPlaceEventDescription1, GoToPlaceEventDescription2
    ] = Field(
        ...,
        description="Have a robot go to a place",
        title="Go To Place Event Description",
    )
